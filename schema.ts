/* 
 * generated by zap-ts: anything you change here is liable to get overwritten
 * generated on 2020-03-13T12:09:56.111Z
 */

import {
  JSONValue,
  JSONArray,
  DateString,
  SQLFragment,
  GenericSQLExpression,
  ColumnNames,
  ColumnValues,
  ParentColumn,
  DefaultType,
} from "./src/core";


/* === schema: public === */

export type appleEnvironment = 'PROD' | 'Sandbox';
export namespace every {
  export type appleEnvironment = ['PROD', 'Sandbox'];
}
export namespace appleTransactions {
  export type Table = "appleTransactions";
  export interface Selectable {
    environment: any;
    originalTransactionId: string;
    accountId: number;
    latestReceiptData: string | null;
  };
  export interface Insertable {
    environment: any | SQLFragment;
    originalTransactionId: string | SQLFragment;
    accountId: number | SQLFragment;
    latestReceiptData?: string | null | DefaultType | SQLFragment;
  };
  export interface Updatable extends Partial<Insertable> { };
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace authors {
  export type Table = "authors";
  export interface Selectable {
    id: number;
    name: string;
    isLiving: boolean | null;
  };
  export interface Insertable {
    id?: number | DefaultType | SQLFragment;
    name: string | SQLFragment;
    isLiving?: boolean | null | DefaultType | SQLFragment;
  };
  export interface Updatable extends Partial<Insertable> { };
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace books {
  export type Table = "books";
  export interface Selectable {
    id: number;
    authorId: number;
    title: string | null;
    createdAt: Date;
    updatedAt: Date;
  };
  export interface Insertable {
    id?: number | DefaultType | SQLFragment;
    authorId: number | SQLFragment;
    title?: string | null | DefaultType | SQLFragment;
    createdAt?: Date | DateString | DefaultType | SQLFragment;
    updatedAt?: Date | DateString | DefaultType | SQLFragment;
  };
  export interface Updatable extends Partial<Insertable> { };
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace emailAuthentication {
  export type Table = "emailAuthentication";
  export interface Selectable {
    email: string;
    consecutiveFailedLogins: number;
    lastFailedLogin: Date | null;
  };
  export interface Insertable {
    email: string | SQLFragment;
    consecutiveFailedLogins?: number | DefaultType | SQLFragment;
    lastFailedLogin?: Date | DateString | null | DefaultType | SQLFragment;
  };
  export interface Updatable extends Partial<Insertable> { };
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace employees {
  export type Table = "employees";
  export interface Selectable {
    id: number;
    name: string;
    managerId: number | null;
  };
  export interface Insertable {
    id?: number | DefaultType | SQLFragment;
    name: string | SQLFragment;
    managerId?: number | null | DefaultType | SQLFragment;
  };
  export interface Updatable extends Partial<Insertable> { };
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace stores {
  export type Table = "stores";
  export interface Selectable {
    id: number;
    name: string;
    geom: any;
  };
  export interface Insertable {
    id?: number | DefaultType | SQLFragment;
    name: string | SQLFragment;
    geom: any | SQLFragment;
  };
  export interface Updatable extends Partial<Insertable> { };
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export namespace tags {
  export type Table = "tags";
  export interface Selectable {
    tag: string;
    bookId: number;
  };
  export interface Insertable {
    tag: string | SQLFragment;
    bookId: number | SQLFragment;
  };
  export interface Updatable extends Partial<Insertable> { };
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}
export type Table = appleTransactions.Table | authors.Table | books.Table | emailAuthentication.Table | employees.Table | stores.Table | tags.Table;
export type Selectable = appleTransactions.Selectable | authors.Selectable | books.Selectable | emailAuthentication.Selectable | employees.Selectable | stores.Selectable | tags.Selectable;
export type Whereable = appleTransactions.Whereable | authors.Whereable | books.Whereable | emailAuthentication.Whereable | employees.Whereable | stores.Whereable | tags.Whereable;
export type Insertable = appleTransactions.Insertable | authors.Insertable | books.Insertable | emailAuthentication.Insertable | employees.Insertable | stores.Insertable | tags.Insertable;
export type Updatable = appleTransactions.Updatable | authors.Updatable | books.Updatable | emailAuthentication.Updatable | employees.Updatable | stores.Updatable | tags.Updatable;
export type Column = appleTransactions.Column | authors.Column | books.Column | emailAuthentication.Column | employees.Column | stores.Column | tags.Column;
export type AllTables = [appleTransactions.Table, authors.Table, books.Table, emailAuthentication.Table, employees.Table, stores.Table, tags.Table];


export type SelectableForTable<T extends Table> =
  T extends appleTransactions.Table ? appleTransactions.Selectable :
  T extends authors.Table ? authors.Selectable :
  T extends books.Table ? books.Selectable :
  T extends emailAuthentication.Table ? emailAuthentication.Selectable :
  T extends employees.Table ? employees.Selectable :
  T extends stores.Table ? stores.Selectable :
  T extends tags.Table ? tags.Selectable :
  never;

export type WhereableForTable<T extends Table> =
  T extends appleTransactions.Table ? appleTransactions.Whereable :
  T extends authors.Table ? authors.Whereable :
  T extends books.Table ? books.Whereable :
  T extends emailAuthentication.Table ? emailAuthentication.Whereable :
  T extends employees.Table ? employees.Whereable :
  T extends stores.Table ? stores.Whereable :
  T extends tags.Table ? tags.Whereable :
  never;

export type InsertableForTable<T extends Table> =
  T extends appleTransactions.Table ? appleTransactions.Insertable :
  T extends authors.Table ? authors.Insertable :
  T extends books.Table ? books.Insertable :
  T extends emailAuthentication.Table ? emailAuthentication.Insertable :
  T extends employees.Table ? employees.Insertable :
  T extends stores.Table ? stores.Insertable :
  T extends tags.Table ? tags.Insertable :
  never;

export type UpdatableForTable<T extends Table> =
  T extends appleTransactions.Table ? appleTransactions.Updatable :
  T extends authors.Table ? authors.Updatable :
  T extends books.Table ? books.Updatable :
  T extends emailAuthentication.Table ? emailAuthentication.Updatable :
  T extends employees.Table ? employees.Updatable :
  T extends stores.Table ? stores.Updatable :
  T extends tags.Table ? tags.Updatable :
  never;

export type ColumnForTable<T extends Table> =
  T extends appleTransactions.Table ? appleTransactions.Column :
  T extends authors.Table ? authors.Column :
  T extends books.Table ? books.Column :
  T extends emailAuthentication.Table ? emailAuthentication.Column :
  T extends employees.Table ? employees.Column :
  T extends stores.Table ? stores.Column :
  T extends tags.Table ? tags.Column :
  never;

export type SQLForTable<T extends Table> =
  T extends appleTransactions.Table ? appleTransactions.SQL :
  T extends authors.Table ? authors.SQL :
  T extends books.Table ? books.SQL :
  T extends emailAuthentication.Table ? emailAuthentication.SQL :
  T extends employees.Table ? employees.SQL :
  T extends stores.Table ? stores.SQL :
  T extends tags.Table ? tags.SQL :
  never;